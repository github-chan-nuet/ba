// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CompletedQuestionType.
const (
	CompletedQuestionTypeMultipleChoice CompletedQuestionType = "multiple_choice"
	CompletedQuestionTypeSingleChoice   CompletedQuestionType = "single_choice"
)

// Defines values for QuestionType.
const (
	QuestionTypeMultipleChoice QuestionType = "multiple_choice"
	QuestionTypeSingleChoice   QuestionType = "single_choice"
)

// Answer defines model for Answer.
type Answer struct {
	Answer string             `json:"answer"`
	Id     openapi_types.UUID `json:"id"`
}

// AnswerWithCorrection defines model for AnswerWithCorrection.
type AnswerWithCorrection struct {
	Answer    string             `json:"answer"`
	Id        openapi_types.UUID `json:"id"`
	IsCorrect bool               `json:"isCorrect"`
}

// CompletedExam defines model for CompletedExam.
type CompletedExam struct {
	CompletedAt openapi_types.Date  `json:"completedAt"`
	Questions   []CompletedQuestion `json:"questions"`
}

// CompletedQuestion defines model for CompletedQuestion.
type CompletedQuestion struct {
	Answers     []AnswerWithCorrection `json:"answers"`
	Id          openapi_types.UUID     `json:"id"`
	Question    string                 `json:"question"`
	Type        CompletedQuestionType  `json:"type"`
	UserAnswers []openapi_types.UUID   `json:"userAnswers"`
}

// CompletedQuestionType defines model for CompletedQuestion.Type.
type CompletedQuestionType string

// CourseCompletion defines model for CourseCompletion.
type CourseCompletion struct {
	CompletedLessons []openapi_types.UUID `json:"completedLessons"`
	CourseId         openapi_types.UUID   `json:"courseId"`
}

// Error defines model for Error.
type Error struct {
	Detail  string `json:"detail"`
	Pointer string `json:"pointer"`
}

// Exam defines model for Exam.
type Exam struct {
	Id        openapi_types.UUID `json:"id"`
	Questions []Question         `json:"questions"`
}

// ExamCompletion defines model for ExamCompletion.
type ExamCompletion = []QuestionCompletion

// ExperienceGain defines model for ExperienceGain.
type ExperienceGain struct {
	NewExperienceGained int  `json:"newExperienceGained"`
	NewLevel            *int `json:"newLevel,omitempty"`
	TotalExperience     int  `json:"totalExperience"`
}

// Lesson defines model for Lesson.
type Lesson struct {
	LessonId openapi_types.UUID `json:"lessonId"`
}

// ProblemDetail defines model for ProblemDetail.
type ProblemDetail struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string  `json:"detail,omitempty"`
	Errors *[]Error `json:"errors,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type
	Type string `json:"type"`
}

// Question defines model for Question.
type Question struct {
	Answers  []Answer           `json:"answers"`
	Id       openapi_types.UUID `json:"id"`
	Question string             `json:"question"`
	Type     QuestionType       `json:"type"`
}

// QuestionType defines model for Question.Type.
type QuestionType string

// QuestionCompletion defines model for QuestionCompletion.
type QuestionCompletion struct {
	Answers    []openapi_types.UUID `json:"answers"`
	QuestionId openapi_types.UUID   `json:"questionId"`
}

// User defines model for User.
type User struct {
	Email           *string `json:"email,omitempty"`
	Firstname       *string `json:"firstname,omitempty"`
	Lastname        *string `json:"lastname,omitempty"`
	Level           *int    `json:"level,omitempty"`
	TotalExperience *int    `json:"totalExperience,omitempty"`
}

// UserAuthentication defines model for UserAuthentication.
type UserAuthentication struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UserPatchModel defines model for UserPatchModel.
type UserPatchModel struct {
	Email     *string `json:"email,omitempty"`
	Firstname *string `json:"firstname,omitempty"`
	Lastname  *string `json:"lastname,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// UserPostModel defines model for UserPostModel.
type UserPostModel struct {
	Email     string `json:"email"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Password  string `json:"password"`
}

// CourseId defines model for courseId.
type CourseId = openapi_types.UUID

// ExamId defines model for examId.
type ExamId = openapi_types.UUID

// UserId defines model for userId.
type UserId = openapi_types.UUID

// CreateLessonCompletionJSONRequestBody defines body for CreateLessonCompletion for application/json ContentType.
type CreateLessonCompletionJSONRequestBody = Lesson

// CompleteExamJSONRequestBody defines body for CompleteExam for application/json ContentType.
type CompleteExamJSONRequestBody = ExamCompletion

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserPostModel

// LoginAndReturnJwtTokenJSONRequestBody defines body for LoginAndReturnJwtToken for application/json ContentType.
type LoginAndReturnJwtTokenJSONRequestBody = UserAuthentication

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserPatchModel
