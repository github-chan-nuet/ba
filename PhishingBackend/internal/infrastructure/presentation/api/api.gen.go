//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for QuestionType.
const (
	MultipleChoice QuestionType = "multiple_choice"
	SingleChoice   QuestionType = "single_choice"
)

// Answer defines model for Answer.
type Answer struct {
	Answer *string `json:"answer,omitempty"`
	Id     *int    `json:"id,omitempty"`
}

// Exam defines model for Exam.
type Exam = []Question

// ExamCompletion defines model for ExamCompletion.
type ExamCompletion = []QuestionCompletion

// ExamValidation defines model for ExamValidation.
type ExamValidation = map[string]interface{}

// ExperienceGain defines model for ExperienceGain.
type ExperienceGain struct {
	NewExperienceGained int64  `json:"newExperienceGained"`
	NewLevel            *int64 `json:"newLevel,omitempty"`
	TotalExperience     int64  `json:"totalExperience"`
}

// Lesson defines model for Lesson.
type Lesson struct {
	LessonId openapi_types.UUID `json:"lessonId"`
}

// Question defines model for Question.
type Question struct {
	Answers  *[]Answer     `json:"answers,omitempty"`
	Id       *int          `json:"id,omitempty"`
	Question *string       `json:"question,omitempty"`
	Type     *QuestionType `json:"type,omitempty"`
}

// QuestionType defines model for Question.Type.
type QuestionType string

// QuestionCompletion defines model for QuestionCompletion.
type QuestionCompletion struct {
	Answers    *[]int `json:"answers,omitempty"`
	QuestionId *int   `json:"questionId,omitempty"`
}

// User defines model for User.
type User struct {
	Email           *string `json:"email,omitempty"`
	Firstname       *string `json:"firstname,omitempty"`
	Lastname        *string `json:"lastname,omitempty"`
	Level           *int    `json:"level,omitempty"`
	TotalExperience *int    `json:"totalExperience,omitempty"`
}

// UserAuthentication defines model for UserAuthentication.
type UserAuthentication struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UserPatchModel defines model for UserPatchModel.
type UserPatchModel struct {
	Email     *string `json:"email,omitempty"`
	Firstname *string `json:"firstname,omitempty"`
	Lastname  *string `json:"lastname,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// UserPostModel defines model for UserPostModel.
type UserPostModel struct {
	Email     string `json:"email"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Password  string `json:"password"`
}

// CreateLessonCompletionJSONRequestBody defines body for CreateLessonCompletion for application/json ContentType.
type CreateLessonCompletionJSONRequestBody = Lesson

// CompleteExamJSONRequestBody defines body for CompleteExam for application/json ContentType.
type CompleteExamJSONRequestBody = ExamCompletion

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserPostModel

// LoginAndReturnJwtTokenJSONRequestBody defines body for LoginAndReturnJwtToken for application/json ContentType.
type LoginAndReturnJwtTokenJSONRequestBody = UserAuthentication

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserPatchModel

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// TODO
	// (POST /courses/{courseId}/completions)
	CreateLessonCompletion(w http.ResponseWriter, r *http.Request, courseId int)
	// TODO
	// (GET /exams/{examId})
	GetExamsExamId(w http.ResponseWriter, r *http.Request, examId openapi_types.UUID)
	// TODO
	// (POST /exams/{examId}/completions)
	CompleteExam(w http.ResponseWriter, r *http.Request, examId openapi_types.UUID)
	// todo
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Authenticates and authorizes the user and returns a JWT token if the authentication was successful.
	// (POST /users/login)
	LoginAndReturnJwtToken(w http.ResponseWriter, r *http.Request)
	// todo
	// (GET /users/{userId})
	GetUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// todo
	// (PATCH /users/{userId})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateLessonCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateLessonCompletion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId int

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", r.PathValue("courseId"), &courseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "courseId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLessonCompletion(w, r, courseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetExamsExamId operation middleware
func (siw *ServerInterfaceWrapper) GetExamsExamId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "examId" -------------
	var examId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "examId", r.PathValue("examId"), &examId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "examId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExamsExamId(w, r, examId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CompleteExam operation middleware
func (siw *ServerInterfaceWrapper) CompleteExam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "examId" -------------
	var examId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "examId", r.PathValue("examId"), &examId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "examId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CompleteExam(w, r, examId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginAndReturnJwtToken operation middleware
func (siw *ServerInterfaceWrapper) LoginAndReturnJwtToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginAndReturnJwtToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/courses/{courseId}/completions", wrapper.CreateLessonCompletion)
	m.HandleFunc("GET "+options.BaseURL+"/exams/{examId}", wrapper.GetExamsExamId)
	m.HandleFunc("POST "+options.BaseURL+"/exams/{examId}/completions", wrapper.CompleteExam)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.CreateUser)
	m.HandleFunc("POST "+options.BaseURL+"/users/login", wrapper.LoginAndReturnJwtToken)
	m.HandleFunc("GET "+options.BaseURL+"/users/{userId}", wrapper.GetUser)
	m.HandleFunc("PATCH "+options.BaseURL+"/users/{userId}", wrapper.UpdateUser)

	return m
}
