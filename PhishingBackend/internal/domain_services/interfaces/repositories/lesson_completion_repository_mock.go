// Code generated by MockGen. DO NOT EDIT.
// Source: lesson_completion_repository.go
//
// Generated by this command:
//
//	mockgen -source=lesson_completion_repository.go -destination=lesson_completion_repository_mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	domain_model "phishing_backend/internal/domain_model"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockLessonCompletionRepository is a mock of LessonCompletionRepository interface.
type MockLessonCompletionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLessonCompletionRepositoryMockRecorder
	isgomock struct{}
}

// MockLessonCompletionRepositoryMockRecorder is the mock recorder for MockLessonCompletionRepository.
type MockLessonCompletionRepositoryMockRecorder struct {
	mock *MockLessonCompletionRepository
}

// NewMockLessonCompletionRepository creates a new mock instance.
func NewMockLessonCompletionRepository(ctrl *gomock.Controller) *MockLessonCompletionRepository {
	mock := &MockLessonCompletionRepository{ctrl: ctrl}
	mock.recorder = &MockLessonCompletionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLessonCompletionRepository) EXPECT() *MockLessonCompletionRepositoryMockRecorder {
	return m.recorder
}

// CountForUser mocks base method.
func (m *MockLessonCompletionRepository) CountForUser(userId uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountForUser", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountForUser indicates an expected call of CountForUser.
func (mr *MockLessonCompletionRepositoryMockRecorder) CountForUser(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountForUser", reflect.TypeOf((*MockLessonCompletionRepository)(nil).CountForUser), userId)
}

// Create mocks base method.
func (m *MockLessonCompletionRepository) Create(cc *domain_model.LessonCompletion) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", cc)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLessonCompletionRepositoryMockRecorder) Create(cc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLessonCompletionRepository)(nil).Create), cc)
}

// GetAllCompletedLessonsInAllCourses mocks base method.
func (m *MockLessonCompletionRepository) GetAllCompletedLessonsInAllCourses(userId uuid.UUID) ([]domain_model.LessonCompletion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompletedLessonsInAllCourses", userId)
	ret0, _ := ret[0].([]domain_model.LessonCompletion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompletedLessonsInAllCourses indicates an expected call of GetAllCompletedLessonsInAllCourses.
func (mr *MockLessonCompletionRepositoryMockRecorder) GetAllCompletedLessonsInAllCourses(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompletedLessonsInAllCourses", reflect.TypeOf((*MockLessonCompletionRepository)(nil).GetAllCompletedLessonsInAllCourses), userId)
}

// GetLatestLessonCompletions mocks base method.
func (m *MockLessonCompletionRepository) GetLatestLessonCompletions() (map[uuid.UUID]time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestLessonCompletions")
	ret0, _ := ret[0].(map[uuid.UUID]time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestLessonCompletions indicates an expected call of GetLatestLessonCompletions.
func (mr *MockLessonCompletionRepositoryMockRecorder) GetLatestLessonCompletions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestLessonCompletions", reflect.TypeOf((*MockLessonCompletionRepository)(nil).GetLatestLessonCompletions))
}

// GetLessonCompletionsOfCourseAndUser mocks base method.
func (m *MockLessonCompletionRepository) GetLessonCompletionsOfCourseAndUser(userId, courseId uuid.UUID) ([]domain_model.LessonCompletion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonCompletionsOfCourseAndUser", userId, courseId)
	ret0, _ := ret[0].([]domain_model.LessonCompletion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonCompletionsOfCourseAndUser indicates an expected call of GetLessonCompletionsOfCourseAndUser.
func (mr *MockLessonCompletionRepositoryMockRecorder) GetLessonCompletionsOfCourseAndUser(userId, courseId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonCompletionsOfCourseAndUser", reflect.TypeOf((*MockLessonCompletionRepository)(nil).GetLessonCompletionsOfCourseAndUser), userId, courseId)
}
