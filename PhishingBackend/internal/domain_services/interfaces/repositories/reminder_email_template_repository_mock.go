// Code generated by MockGen. DO NOT EDIT.
// Source: reminder_email_template_repository.go
//
// Generated by this command:
//
//	mockgen -source=reminder_email_template_repository.go -destination=reminder_email_template_repository_mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	domain_model "phishing_backend/internal/domain_model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReminderEmailTemplateRepository is a mock of ReminderEmailTemplateRepository interface.
type MockReminderEmailTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReminderEmailTemplateRepositoryMockRecorder
	isgomock struct{}
}

// MockReminderEmailTemplateRepositoryMockRecorder is the mock recorder for MockReminderEmailTemplateRepository.
type MockReminderEmailTemplateRepositoryMockRecorder struct {
	mock *MockReminderEmailTemplateRepository
}

// NewMockReminderEmailTemplateRepository creates a new mock instance.
func NewMockReminderEmailTemplateRepository(ctrl *gomock.Controller) *MockReminderEmailTemplateRepository {
	mock := &MockReminderEmailTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockReminderEmailTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReminderEmailTemplateRepository) EXPECT() *MockReminderEmailTemplateRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockReminderEmailTemplateRepository) GetAll() (*[]domain_model.ReminderEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]domain_model.ReminderEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockReminderEmailTemplateRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReminderEmailTemplateRepository)(nil).GetAll))
}
