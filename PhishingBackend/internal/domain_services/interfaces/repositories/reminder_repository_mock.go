// Code generated by MockGen. DO NOT EDIT.
// Source: reminder_repository.go
//
// Generated by this command:
//
//	mockgen -source=reminder_repository.go -destination=reminder_repository_mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	domain_model "phishing_backend/internal/domain_model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReminderRepository is a mock of ReminderRepository interface.
type MockReminderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReminderRepositoryMockRecorder
	isgomock struct{}
}

// MockReminderRepositoryMockRecorder is the mock recorder for MockReminderRepository.
type MockReminderRepositoryMockRecorder struct {
	mock *MockReminderRepository
}

// NewMockReminderRepository creates a new mock instance.
func NewMockReminderRepository(ctrl *gomock.Controller) *MockReminderRepository {
	mock := &MockReminderRepository{ctrl: ctrl}
	mock.recorder = &MockReminderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReminderRepository) EXPECT() *MockReminderRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockReminderRepository) GetAll() ([]domain_model.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain_model.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockReminderRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReminderRepository)(nil).GetAll))
}

// SaveOrUpdate mocks base method.
func (m *MockReminderRepository) SaveOrUpdate(reminder *domain_model.Reminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdate", reminder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdate indicates an expected call of SaveOrUpdate.
func (mr *MockReminderRepositoryMockRecorder) SaveOrUpdate(reminder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdate", reflect.TypeOf((*MockReminderRepository)(nil).SaveOrUpdate), reminder)
}
