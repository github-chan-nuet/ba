// Code generated by MockGen. DO NOT EDIT.
// Source: phishing_simulation_repository.go
//
// Generated by this command:
//
//	mockgen -source=phishing_simulation_repository.go -destination=phishing_simulation_repository_mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	domain_model "phishing_backend/internal/domain_model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPhishingSimulationRepository is a mock of PhishingSimulationRepository interface.
type MockPhishingSimulationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPhishingSimulationRepositoryMockRecorder
	isgomock struct{}
}

// MockPhishingSimulationRepositoryMockRecorder is the mock recorder for MockPhishingSimulationRepository.
type MockPhishingSimulationRepositoryMockRecorder struct {
	mock *MockPhishingSimulationRepository
}

// NewMockPhishingSimulationRepository creates a new mock instance.
func NewMockPhishingSimulationRepository(ctrl *gomock.Controller) *MockPhishingSimulationRepository {
	mock := &MockPhishingSimulationRepository{ctrl: ctrl}
	mock.recorder = &MockPhishingSimulationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhishingSimulationRepository) EXPECT() *MockPhishingSimulationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPhishingSimulationRepository) Create(run *domain_model.PhishingSimulationRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", run)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPhishingSimulationRepositoryMockRecorder) Create(run any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).Create), run)
}

// CreateUserVulnerability mocks base method.
func (m *MockPhishingSimulationRepository) CreateUserVulnerability(vulnerability *domain_model.PhishingSimulationUserVulnerability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserVulnerability", vulnerability)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserVulnerability indicates an expected call of CreateUserVulnerability.
func (mr *MockPhishingSimulationRepositoryMockRecorder) CreateUserVulnerability(vulnerability any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserVulnerability", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).CreateUserVulnerability), vulnerability)
}

// GetLatestRun mocks base method.
func (m *MockPhishingSimulationRepository) GetLatestRun(userId uuid.UUID) (*domain_model.PhishingSimulationRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRun", userId)
	ret0, _ := ret[0].(*domain_model.PhishingSimulationRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRun indicates an expected call of GetLatestRun.
func (mr *MockPhishingSimulationRepositoryMockRecorder) GetLatestRun(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRun", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).GetLatestRun), userId)
}

// GetRecognitionFeatures mocks base method.
func (m *MockPhishingSimulationRepository) GetRecognitionFeatures() ([]domain_model.PhishingSimulationRecognitionFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecognitionFeatures")
	ret0, _ := ret[0].([]domain_model.PhishingSimulationRecognitionFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecognitionFeatures indicates an expected call of GetRecognitionFeatures.
func (mr *MockPhishingSimulationRepositoryMockRecorder) GetRecognitionFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecognitionFeatures", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).GetRecognitionFeatures))
}

// GetRun mocks base method.
func (m *MockPhishingSimulationRepository) GetRun(runId uuid.UUID) (*domain_model.PhishingSimulationRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRun", runId)
	ret0, _ := ret[0].(*domain_model.PhishingSimulationRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRun indicates an expected call of GetRun.
func (mr *MockPhishingSimulationRepositoryMockRecorder) GetRun(runId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRun", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).GetRun), runId)
}

// GetTemplates mocks base method.
func (m *MockPhishingSimulationRepository) GetTemplates() ([]domain_model.PhishingSimulationContentTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplates")
	ret0, _ := ret[0].([]domain_model.PhishingSimulationContentTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplates indicates an expected call of GetTemplates.
func (mr *MockPhishingSimulationRepositoryMockRecorder) GetTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplates", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).GetTemplates))
}

// GetUnprocessedRuns mocks base method.
func (m *MockPhishingSimulationRepository) GetUnprocessedRuns() ([]domain_model.PhishingSimulationRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedRuns")
	ret0, _ := ret[0].([]domain_model.PhishingSimulationRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedRuns indicates an expected call of GetUnprocessedRuns.
func (mr *MockPhishingSimulationRepositoryMockRecorder) GetUnprocessedRuns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedRuns", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).GetUnprocessedRuns))
}

// GetUserVulnerabilities mocks base method.
func (m *MockPhishingSimulationRepository) GetUserVulnerabilities(userId uuid.UUID) ([]domain_model.PhishingSimulationUserVulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVulnerabilities", userId)
	ret0, _ := ret[0].([]domain_model.PhishingSimulationUserVulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVulnerabilities indicates an expected call of GetUserVulnerabilities.
func (mr *MockPhishingSimulationRepositoryMockRecorder) GetUserVulnerabilities(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVulnerabilities", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).GetUserVulnerabilities), userId)
}

// Update mocks base method.
func (m *MockPhishingSimulationRepository) Update(run *domain_model.PhishingSimulationRunPatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", run)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPhishingSimulationRepositoryMockRecorder) Update(run any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).Update), run)
}

// UpdateUserVulnerability mocks base method.
func (m *MockPhishingSimulationRepository) UpdateUserVulnerability(vulnPatch *domain_model.PhishingSimulationUserVulnerabilityPatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserVulnerability", vulnPatch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserVulnerability indicates an expected call of UpdateUserVulnerability.
func (mr *MockPhishingSimulationRepositoryMockRecorder) UpdateUserVulnerability(vulnPatch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserVulnerability", reflect.TypeOf((*MockPhishingSimulationRepository)(nil).UpdateUserVulnerability), vulnPatch)
}
