openapi: 3.0.0
info:
  title: Phishing Backend - OpenAPI 3.0
  description: |-
    todo
  contact:
    email: mischa.binder@ost.ch
  version: 0.0.1
servers:
  - url: "/api"
tags:
  # example
  - name: pet
    description: Everything about your Pets
paths:
  "/users":
    post:
      summary: todo
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserPostModel"
      responses:
        '201':
          $ref: "#/components/responses/ProblemDetail"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/users/login":
    post:
      summary: Authenticates and authorizes the user and returns a JWT token if the authentication was successful.
      operationId: loginAndReturnJwtToken
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserAuthentication"
        required: true
      responses:
        '200':
          description: JWT token
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/users/{userId}":
    get:
      security:
        - bearerAuth: [ ]
      summary: todo
      operationId: getUser
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

    patch:
      security:
        - bearerAuth: [ ]
      summary: todo
      operationId: updateUser
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserPatchModel"
      responses:
        '200':
          description: User was updated
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/courses/completions":
    get:
      security:
        - bearerAuth: [ ]
      summary: TODO
      description: TODO
      operationId: getAllLessonCompletionsOfUser
      responses:
        '200':
          description: Completed lessons of user
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CourseCompletion"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/courses/{courseId}/completions":
    get:
      security:
        - bearerAuth: [ ]
      summary: TODO
      description: TODO
      operationId: getLessonCompletionsOfCourseAndUser
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the course
      responses:
        '200':
          description: Completed lessons of user in specific course
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

    post:
      security:
        - bearerAuth: [ ]
      summary: TODO
      description: TODO
      operationId: createLessonCompletion
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: Id of the course
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Lesson"
        required: true
      responses:
        '201':
          description: Lesson completion newly created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExperienceGain"
        '204':
          description: Lesson completion already exists
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/exams/{examId}":
    get:
      security:
        - bearerAuth: [ ]
      summary: TODO
      description: getExam
      parameters:
        - in: path
          name: examId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Exam"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/exams/{examId}/completions":
    post:
      security:
        - bearerAuth: [ ]
      summary: TODO
      operationId: completeExam
      description: TODO
      parameters:
        - in: path
          name: examId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ExamCompletion"
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExamValidation"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    ProblemDetail:
      description: An RFC 9457 problem object
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"

  schemas:
    Lesson:
      required:
        - lessonId
      type: object
      properties:
        lessonId:
          type: string
          format: uuid

    ExperienceGain:
      required:
        - newExperienceGained
        - totalExperience
      type: object
      properties:
        newExperienceGained:
          type: integer
          format: int64
        totalExperience:
          type: integer
          format: int64
        newLevel:
          type: integer
          format: int64

    UserAuthentication:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        level:
          type: integer
        totalExperience:
          type: integer

    UserPatchModel:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
        email:
          type: string

    UserPostModel:
      allOf:
        - $ref: "#/components/schemas/UserPatchModel"
        - type: object
          required:
            - firstname
            - lastname
            - password
            - email

    Exam:
      type: array
      items:
        $ref: "#/components/schemas/Question"

    Question:
      type: object
      properties:
        id:
          type: integer
        question:
          type: string
        type:
          type: string
          enum: [ single_choice, multiple_choice ]
        answers:
          type: array
          items:
            $ref: "#/components/schemas/Answer"

    Answer:
      type: object
      properties:
        id:
          type: integer
        answer:
          type: string

    ExamCompletion:
      type: array
      items:
        $ref: "#/components/schemas/QuestionCompletion"

    QuestionCompletion:
      type: object
      properties:
        questionId:
          type: integer
        answers:
          type: array
          items:
            type: integer

    ExamValidation:
      type: object

    CourseCompletion:
      type: object
      properties:
        courseId:
          type: string
          format: uuid
        completedLessons:
          type: array
          items:
            type: string
            format: uuid
      required:
        - courseId
        - completedLessons

    ProblemDetail:
      type: object
      title: An RFC 9457 problem object
      properties:
        "type":
          type: string
          description: A URI reference that identifies the problem type
          format: "uri"
          maxLength: 1024
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          format: int
          minimum: 100
          maximum: 599
        title:
          type: string
          description: A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization.
          maxLength: 1024
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          maxLength: 4096
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
          maxLength: 1024
    #        errors:
      required:
        - type
        - status
        - title