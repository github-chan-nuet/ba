openapi: 3.1.1
info:
  title: Phishing Backend - OpenAPI 3.0
  description: |-
    todo
  contact:
    email: mischa.binder@ost.ch, patrick.scheidegger@ost.ch
  version: 0.0.1
servers:
  - url: "/api"
tags:
  # tests
  - name: pet
    description: Everything about your Pets
paths:
  "/users":
    post:
      summary: todo
      operationId: todo
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserPostModel"
      responses:
        '201':
          description: User was created
        '400':
          description: Bad request
        '500':
          description: Internal Server Error

  "/users/login":
    post:
      summary: Authenticates and authorizes the user and returns a JWT token if the authentication was successful.
      operationId: loginAndReturnJwtToken
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserAuthentication"
        required: true
      responses:
        '200':
          description: JWT token
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Authentication claims are invalid
        '500':
          description: Internal Server Error

  "/users/{userId}":
    get:
      security:
        - bearerAuth: [ ]
      summary: todo
      operationId: todo
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the course
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal Server Error

    patch:
      security:
        - bearerAuth: [ ]
      summary: todo
      operationId: todo
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the course
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserPatchModel"
      responses:
        '200':
          description: User was updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  "/courses/{courseId}/completions":
    post:
      security:
        - bearerAuth: [ ]
      summary: TODO
      description: TODO
      operationId: createLessonCompletion
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: Id of the course
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Lesson"
        required: true
      responses:
        '201':
          description: Lesson completion newly created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExperienceGain"
        '204':
          description: Lesson completion already exists
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Lesson not found
        '500':
          description: Internal Server Error

  "/exams/{examId}":
    get:
      security:
        - bearerAuth: [ ]
      summary: TODO
      description: TODO
      operationId: todo
      parameters:
        - in: path
          name: examId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Exam"
        '401':
          description: Unauthorized
        '404':
          description: Exam not found
        '500':
          description: Internal Server Error

  "/exams/{examId}/completions":
    post:
      security:
        - bearerAuth: [ ]
      summary: TODO
      description: TODO
      operationId: todo
      parameters:
        - in: path
          name: examId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ExamCompletion"
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExamValidation"
        '401':
          description: Unauthorized
        '404':
          description: Exam not found
        '500':
          description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Lesson:
      required:
        - lessonId
      type: object
      properties:
        lessonId:
          type: integer
          format: int64

    ExperienceGain:
      required:
        - newExperienceGained
        - totalExperience
      type: object
      properties:
        newExperienceGained:
          type: integer
          format: int64
        totalExperience:
          type: integer
          format: int64
        newLevel:
          type: integer
          format: int64

    UserAuthentication:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
        email:
          type: string
        level:
          type: integer
        totalExperience:
          type: integer

    UserPatchModel:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
        email:
          type: string

    UserPostModel:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - firstname
            - lastname
            - password
            - email

    Exam:
      type: array
      items:
        $ref: "#/components/schemas/Question"

    Question:
      type: object
      properties:
        id:
          type: id
        question:
          type: string
        type:
          type: string
          enum: [single_choice, multiple_choice]
        answers:
          type: array
          items:
            $ref: "#/components/schemas/Answer"

    Answer:
      id:
        type: id
      answer:
        type: string

    ExamCompletion:
      type: array
      items:
        $ref: "#/components/schemas/QuestionCompletion"

    QuestionCompletion:
      type: object
      properties:
        questionId:
          type: integer
        answers:
          type: array
          items:
            type: integer

    ExamValidation:

