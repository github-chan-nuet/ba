openapi: 3.0.0
info:
  title: Phishing Backend - OpenAPI 3.0
  description: |-
    todo
  contact:
    email: mischa.binder@ost.ch
  version: 0.0.1
servers:
  - url: "/api"
tags:
  - name: User
    description: User and authentication related
  - name: Completion
    description: Keeps track of the users progress regarding the online courses
  - name: Exam
    description: Related to completing exams
paths:
  "/users":
    post:
      summary: todo
      tags:
        - User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserPostModel"
      responses:
        '201':
          $ref: "#/components/responses/ProblemDetail"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/users/login":
    post:
      summary: Authenticates and authorizes the user and returns a JWT token if the authentication was successful.
      tags:
        - User
      operationId: loginAndReturnJwtToken
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserAuthentication"
        required: true
      responses:
        '200':
          description: JWT token
          content:
            application/jwt:
              schema:
                type: string
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/users/{userId}":
    get:
      security:
        - bearerAuth: [ ]
      summary: todo
      tags:
        - User
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

    patch:
      security:
        - bearerAuth: [ ]
      summary: todo
      tags:
        - User
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserPatchModel"
      responses:
        '200':
          description: User was updated
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/courses/completions":
    get:
      security:
        - bearerAuth: [ ]
      summary: TODO
      tags:
        - Completion
      description: TODO
      operationId: getAllLessonCompletionsOfUser
      responses:
        '200':
          description: Completed lessons of user
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CourseCompletion"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/courses/{courseId}/completions":
    get:
      security:
        - bearerAuth: [ ]
      summary: TODO
      tags:
        - Completion
      description: TODO
      operationId: getLessonCompletionsOfCourseAndUser
      parameters:
        - $ref: "#/components/parameters/courseId"
      responses:
        '200':
          description: Completed lessons of user in specific course
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

    post:
      security:
        - bearerAuth: [ ]
      summary: TODO
      tags:
        - Completion
      description: TODO
      operationId: createLessonCompletion
      parameters: 
        - $ref: "#/components/parameters/courseId"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Lesson"
        required: true
      responses:
        '201':
          description: Lesson completion newly created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExperienceGain"
        '204':
          description: Lesson completion already exists
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/exams":
    get:
      summary: TODO
      tags:
        - Exam
      description: getExams
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exam"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/exams/{examId}":
    get:
      summary: TODO
      tags:
        - Exam
      description: getExam
      parameters:
        - $ref: "#/components/parameters/examId"
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Exam"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

  "/exams/{examId}/completions":
    post:
      security:
        - bearerAuth: [ ]
      summary: TODO
      tags:
        - Exam
      operationId: completeExam
      description: TODO
      parameters:
        - $ref: "#/components/parameters/examId"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ExamCompletion"
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExperienceGain"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

    get:
      security:
        - bearerAuth: [ ]
      summary: TODO
      tags:
        - Exam
      operationId: getCompletedExam
      description: TODO
      parameters:
        - $ref: "#/components/parameters/examId"
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CompletedExam"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"
  "/phishing-simulation/runs/{phishingSimulationRunId}":
    get:
      summary: TODO
      tags:
        - Phishing Simulation
      operationId: getPhishingSimulationRun
      description: TODO
      parameters:
        - $ref: "#/components/parameters/phishingSimulationRunId"
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PhishingSimulationRun"
        '400':
          $ref: "#/components/responses/ProblemDetail"
        '401':
          $ref: "#/components/responses/ProblemDetail"
        '403':
          $ref: "#/components/responses/ProblemDetail"
        '500':
          $ref: "#/components/responses/ProblemDetail"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    ProblemDetail:
      description: An RFC 9457 problem object
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"

  parameters:
    courseId:
      name: courseId
      in: path
      schema:
        type: string
        format: uuid
      required: true
      description: Id of the course
      
    examId:
      in: path
      name: examId
      schema:
        type: string
        format: uuid
      required: true
      description: Id of the exam
      
    userId:
      in: path
      name: userId
      schema:
        type: string
        format: uuid
      required: true
      description: Id of the user
    
    phishingSimulationRunId:
      in: path
      name: phishingSimulationRunId
      schema:
        type: string
        format: uuid
      required: true
      description: Id of the phishing simulation run

  schemas:
    Lesson:
      required:
        - lessonId
      type: object
      properties:
        lessonId:
          type: string
          format: uuid

    ExperienceGain:
      required:
        - newExperienceGained
        - totalExperience
      type: object
      properties:
        newExperienceGained:
          type: integer
          format: int
        totalExperience:
          type: integer
          format: int
        newLevel:
          type: integer
          format: int

    UserAuthentication:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        level:
          type: integer
        totalExperience:
          type: integer
        participatesInPhishingSimulation:
          type: boolean

    UserPatchModel:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
        email:
          type: string
        participatesInPhishingSimulation:
          type: boolean

    UserPostModel:
      allOf:
        - $ref: "#/components/schemas/UserPatchModel"
        - type: object
          required:
            - firstname
            - lastname
            - password
            - email

    Exam:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
      required:
        - id
        - questions

    CompletedExam:
      properties:
        completedAt:
          type: string
          format: date
        questions:
          type: array
          items:
            $ref: "#/components/schemas/CompletedQuestion"
      required:
        - questions
        - completedAt

    CompletedQuestion:
      properties:
        id:
          type: string
          format: uuid
        question:
          type: string
        type:
          type: string
          enum: [ single_choice, multiple_choice ]
        answers:
          type: array
          items:
            $ref: "#/components/schemas/AnswerWithCorrection"
        userAnswers:
          type: array
          items:
            type: string
            format: uuid
      required:
        - userAnswers
        - id
        - question
        - type
        - answers

    AnswerWithCorrection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        answer:
          type: string
        isCorrect:
          type: boolean
      required:
        - id
        - answer
        - isCorrect

    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        question:
          type: string
        type:
          type: string
          enum: [ single_choice, multiple_choice ]
        answers:
          type: array
          items:
            $ref: "#/components/schemas/Answer"
      required:
        - id
        - question
        - type
        - answers

    Answer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        answer:
          type: string
      required:
        - id
        - answer

    ExamCompletion:
      type: array
      items:
        $ref: "#/components/schemas/QuestionCompletion"

    QuestionCompletion:
      type: object
      properties:
        questionId:
          type: string
          format: uuid
        answers:
          type: array
          items:
            type: string
            format: uuid
      required:
        - questionId
        - answers

    CourseCompletion:
      type: object
      properties:
        courseId:
          type: string
          format: uuid
        completedLessons:
          type: array
          items:
            type: string
            format: uuid
      required:
        - courseId
        - completedLessons

    PhishingSimulationRun:
      type: object
      properties:
        phishingSimulationRunId:
          type: string
          format: uuid
        recognitionFeatureValues:
          type: array
          items:
            $ref: "#/components/schemas/PhishingSimulationRecognitionFeatureValue"
      required:
        - phishingSimulationRunId
        - recognitionFeatureValues
    
    PhishingSimulationRecognitionFeatureValue:
      type: object
      properties:
        recognitionFeatureValueId:
          type: string
          format: uuid
      required:
        - recognitionFeatureValueId

    ProblemDetail:
      type: object
      title: An RFC 9457 problem object
      properties:
        "type":
          type: string
          description: A URI reference that identifies the problem type
          format: "uri"
          maxLength: 1024
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          format: int
          minimum: 100
          maximum: 599
        title:
          type: string
          description: A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization.
          maxLength: 1024
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          maxLength: 4096
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
          maxLength: 1024
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
      required:
        - type
        - status
        - title

    Error:
      type: object
      properties:
        detail:
          type: string
        pointer:
          type: string
      required:
        - detail
        - pointer