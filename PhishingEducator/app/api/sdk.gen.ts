// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { CreateUserData, CreateUserResponse, CreateUserError, LoginAndReturnJwtTokenData, LoginAndReturnJwtTokenResponse, LoginAndReturnJwtTokenError, GetUserData, GetUserResponse, GetUserError, UpdateUserData, UpdateUserError, GetAllLessonCompletionsOfUserData, GetAllLessonCompletionsOfUserResponse, GetAllLessonCompletionsOfUserError, GetLessonCompletionsOfCourseAndUserData, GetLessonCompletionsOfCourseAndUserResponse, GetLessonCompletionsOfCourseAndUserError, CreateLessonCompletionData, CreateLessonCompletionResponse, CreateLessonCompletionError, GetExamsData, GetExamsResponse, GetExamsError, GetExamsByExamIdData, GetExamsByExamIdResponse, GetExamsByExamIdError, CompleteExamData, CompleteExamResponse, CompleteExamError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * todo
 */
export const createUser = <ThrowOnError extends boolean = false>(options?: Options<CreateUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Authenticates and authorizes the user and returns a JWT token if the authentication was successful.
 */
export const loginAndReturnJwtToken = <ThrowOnError extends boolean = false>(options: Options<LoginAndReturnJwtTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginAndReturnJwtTokenResponse, LoginAndReturnJwtTokenError, ThrowOnError>({
        url: '/users/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * todo
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}',
        ...options
    });
};

/**
 * todo
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, UpdateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * TODO
 * TODO
 */
export const getAllLessonCompletionsOfUser = <ThrowOnError extends boolean = false>(options?: Options<GetAllLessonCompletionsOfUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllLessonCompletionsOfUserResponse, GetAllLessonCompletionsOfUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/completions',
        ...options
    });
};

/**
 * TODO
 * TODO
 */
export const getLessonCompletionsOfCourseAndUser = <ThrowOnError extends boolean = false>(options: Options<GetLessonCompletionsOfCourseAndUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLessonCompletionsOfCourseAndUserResponse, GetLessonCompletionsOfCourseAndUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/completions',
        ...options
    });
};

/**
 * TODO
 * TODO
 */
export const createLessonCompletion = <ThrowOnError extends boolean = false>(options: Options<CreateLessonCompletionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLessonCompletionResponse, CreateLessonCompletionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * TODO
 * getExamIds
 */
export const getExams = <ThrowOnError extends boolean = false>(options?: Options<GetExamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExamsResponse, GetExamsError, ThrowOnError>({
        url: '/exams',
        ...options
    });
};

/**
 * TODO
 * getExam
 */
export const getExamsByExamId = <ThrowOnError extends boolean = false>(options: Options<GetExamsByExamIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExamsByExamIdResponse, GetExamsByExamIdError, ThrowOnError>({
        url: '/exams/{examId}',
        ...options
    });
};

/**
 * TODO
 * TODO
 */
export const completeExam = <ThrowOnError extends boolean = false>(options: Options<CompleteExamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompleteExamResponse, CompleteExamError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exams/{examId}/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};