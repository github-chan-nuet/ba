stages:
  - build
#  - test
  - publish
  - deploy

build-phishingbackend:
  stage: build
  image: golang:1.24.1
  script:
    - cd PhishingBackend
    - go build -o /app/phishingBackend cmd/main.go
  artifacts:
    paths:
      - ./app/phishingBackend

build-phishingeducator:
  stage: build
  image: node:22-alpine
  script:
    - cd PhishingEducator
    - npm ci
    - npm run build
  artifacts:
    paths:
      - ./dist

# https://gitlab.com/gitlab-org/gitlab/-/merge_requests/66787/diffs
# test:
#   stage: test
#   image: golang:1.24.1
#   script:
#     - cd PhishingBackend
#     - go run gotest.tools/gotestsum@latest --junitfile testResults.xml
#   artifacts:
#     when: always
#     paths:
#       - PhishingBackend/testResults.xml
#     reports:
#       junit: PhishingBackend/testResults.xml

# TODO: Add tests for frontend

publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  services:
    - name: docker:25.0.3-dind
      alias: docker
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
    - echo CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE} >> ./.docker/.env
    - echo CI_COMMIT_SHA=${CI_COMMIT_SHA} >> ./.docker/.env
  script:
    - docker compose -f .docker/compose.yaml build
    - docker compose -f .docker/compose.yaml push

deploy:
  stage: deploy
  needs:
    - job: publish
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - echo CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE} >> ./.docker/.env
    - echo CI_COMMIT_SHA=${CI_COMMIT_SHA} >> ./.docker/.env
  script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$CD_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - scp -o StrictHostKeyChecking=no ./.docker/compose.yaml ./.docker/compose.prod.yaml ./.docker/.env ./.docker/create-extension.sql "$CD_USERNAME"@"$CD_HOST":/home/$CD_USERNAME/securaware/.docker
    - ssh -o StrictHostKeyChecking=no "$CD_USERNAME"@"$CD_HOST" "docker compose -f /home/$CD_USERNAME/securaware/.docker/compose.yaml -f /home/$CD_USERNAME/securaware/.docker/compose.prod.yaml up -d"